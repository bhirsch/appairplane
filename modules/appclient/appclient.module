<?php

// Constants for permissions. Protects against typos.
define('APPCLIENT_ACCESS_CONFIG', 'applclient config');
define('APPCLIENT_ACCESS_INSTALL', 'appclient install');

// @TODO: move this to config.
define('APPSERVER_API', 'http://d/app'); // Deal with https if available.

function appclient_menu() {
  $items['admin/appclient'] = array(
    'title' => 'App Airplane',
    'page callback' => 'appclient_page',
    'access arguments' => array(APPCLIENT_ACCESS_CONFIG),
  );
  $items['admin/appclient/add'] = array(
    'title' => 'Install or Update an App',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('appclient_add'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array(APPCLIENT_ACCESS_INSTALL),
  );
  return $items;
}

function appclient_permission() {
  return array(
    APPCLIENT_ACCESS_CONFIG => array(
      'title' => t('Configure apps'),
    ),
    APPCLIENT_ACCESS_INSTALL => array(
      'title' => t('Install/Update apps'), // Maybe separate these? What about purchase?
    ),
  );
}

function appclient_page() {
  return 'coming soon';
}

function appclient_add($form, &$form_state) {
  if (!module_exists('update')) {
    // TODO: More descriptive
    drupal_set_message(t('Update module must be enabled. '), 'error');
    return;
  }
  if (!is_writable(conf_path())) {
    // TODO: tell people what to do.
    drupal_set_message('Your Sites directory is not writable by the web server. Please make it writable, or download and install your Apps manually.', 'error');
  }
  if (!is_writable('temporary://')) {
    // TODO: tell people what to do.
    drupal_set_message('Drupal\'s temporary directory is not writeable. Please fix this on the <a href="!href">On the File System page.</a>', array('!href' => url('admin/config/media/file-system')), 'error');
  }

  $form['code'] = array(
    '#title' => t('Purchase code'),
    '#type' => 'textfield',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

function appclient_add_submit($form, &$form_state) {
  $values = $form_state['values'];
  $data = array(
    // 'theme' => system_list('theme'),
    // 'module_enabled' => system_list('module_enabled'),
    'purchase_code' => '', //$values['purchase_code']
    // 'os' => PHP_OS,
  );
  $options = array(
    'method' => 'POST',
    'data' => json_encode($data),
  );
  $return = drupal_http_request(APPSERVER_API . '/fulfill', $options); // deal with API version.

  // TODO: More error handling.
  if ($return->code == 200) {
    $appname = $return->headers['x-fulfill-name'];
    $tmp_dir = 'temporary://appclient';
    $success = file_prepare_directory($tmp_dir, FILE_CREATE_DIRECTORY);
    $tarball = $tmp_dir . "/$appname.tar.gz";
    file_put_contents($tarball, $return->data);

    // Untar the app.
    module_load_include('inc', 'update', 'update.manager');
    $extract_directory = _update_manager_extract_directory();
    try {
      update_manager_archive_extract($tarball, $extract_directory);
    }
    catch (Exception $e) {
      drupal_set_message($e->getMessage(), 'error');
      return FALSE;
    }


    $make = file_get_contents($extract_directory . "/$appname/$appname.make");
    $make = appclient_drush_make_parse_info_file($make);
    // TODO: this assumes that the first listed project has a module of same name.
    $primary = key($make['projects']);

    // Make sure we always get current info about the local site.
    _update_cache_clear('update_project_data');
    $local = update_get_projects();
    foreach ($make['projects'] as $manifest_name => $manifest_version) {
      // TODO: Figure out exactly where this fucker is in the modules dir. Assuming
      // it is in sites/all/modules for now.
      $target = drupal_realpath('./') . '/sites/all/modules/' . $manifest_name;
      $source = drupal_realpath("$extract_directory/$appname/modules/$manifest_name");

      if (isset($local[$manifest_name])) {
        $local_version = $local[$manifest_name]['info']['version'];
        if ($manifest_version > $local_version) {
          // Clean out older versions of projects.
          if (file_exists($target)) {
            $removed = file_unmanaged_delete_recursive($target);
          }
          $renamed = rename($source, $target);
        }
        else {
          // Skip since local is newer. Write to log.
        }
      }
      else {
        $renamed = rename($source, $target);
      }
    }

    // Enable primary module. Does more than just enable, so must run for updates too.
    if (!module_enable(array($primary))) {
      drupal_set_message(t('Unable to enable the %module module which is the primary module in the %appname App.', array('%module' => $primary, '%appname' => $appname)), 'error');
      return;
    }


    require_once DRUPAL_ROOT . '/includes/update.inc';
    if (update_get_update_list()) {
      drupal_set_message(t('Thanks for downloading %appname App. Please update your database. After updating, please visit your Features Control Panel.', array('%appname' => $appname)));
      // We customize update.php to be friendlier. See hook_batch_alter().
      $form_state['redirect'] = 'update.php';
    }
    else {
      drupal_set_message(t('%appname App successfully installed. Thanks for choosing App Airplane.', array('%appname' => $appname)));
      $form_state['redirect'] = 'admin/appui';
    }
  }
  else {
    drupal_set_message(t('Unable to download %appname App. Please try again later. If this error persists, please contact App Airplane.', array('%appname' => $appname)), 'error');
  }
}

/*
 * Make sure we go to our control panel after update.php is run. Be nice.
 */
function appclient_batch_alter(&$batch) {
  if ($batch['source_url'] == 'update.php') {
    $batch['destination'] = 'admin/appui';
  }
}

function appclient_drush_make_parse_info_file($data) {
  if (!$data) {
    return FALSE;
  }

  if (preg_match_all('
    @^\s*                           # Start at the beginning of a line, ignoring leading whitespace
    ((?:
      [^=;\[\]]|                    # Key names cannot contain equal signs, semi-colons or square brackets,
      \[[^\[\]]*\]                  # unless they are balanced and not nested
    )+?)
    \s*=\s*                         # Key/value pairs are separated by equal signs (ignoring white-space)
    (?:
      ("(?:[^"]|(?<=\\\\)")*")|     # Double-quoted string, which may contain slash-escaped quotes/slashes
      (\'(?:[^\']|(?<=\\\\)\')*\')| # Single-quoted string, which may contain slash-escaped quotes/slashes
      ([^\r\n]*?)                   # Non-quoted string
    )\s*$                           # Stop at the next end of a line, ignoring trailing whitespace
    @msx', $data, $matches, PREG_SET_ORDER)) {
    $info = array();
    foreach ($matches as $match) {
      // Fetch the key and value string
      $i = 0;
      foreach (array('key', 'value1', 'value2', 'value3') as $var) {
        $$var = isset($match[++$i]) ? $match[$i] : '';
      }
      $value = stripslashes(substr($value1, 1, -1)) . stripslashes(substr($value2, 1, -1)) . $value3;

      // Parse array syntax
      $keys = preg_split('/\]?\[/', rtrim($key, ']'));
      $last = array_pop($keys);
      $parent = &$info;

      // Create nested arrays
      foreach ($keys as $key) {
        if ($key == '') {
          $key = count($parent);
        }
        if (!isset($parent[$key]) || !is_array($parent[$key])) {
          $parent[$key] = array();
        }
        $parent = &$parent[$key];
      }

      // Handle PHP constants
      if (defined($value)) {
        $value = constant($value);
      }

      // Insert actual value
      if ($last == '') {
        $last = count($parent);
      }
      $parent[$last] = $value;
    }
    return $info;
  }
  return FALSE;
}